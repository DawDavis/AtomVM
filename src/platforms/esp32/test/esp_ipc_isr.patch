#
# This file is part of AtomVM.
#
# Copyright 2023 Paul Guyot <pguyot@kallisys.net>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later
#

diff --git a/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr.c b/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr.c
index dbdbe9027b..97025d5c65 100644
--- a/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr.c
+++ b/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr.c
@@ -57,7 +57,7 @@ typedef enum {
 #define IPC_ISR_EXIT_CRITICAL()  portEXIT_CRITICAL_SAFE(&s_ipc_isr_mux)
 
 static void esp_ipc_isr_call_and_wait(esp_ipc_isr_func_t func, void* arg, esp_ipc_isr_wait_t wait_for);
-
+static void IRAM_ATTR esp_ipc_isr_wait_for_end();
 
 /* Initializing IPC_ISR */
 
@@ -130,6 +130,8 @@ void IRAM_ATTR esp_ipc_isr_release_other_cpu(void)
         const uint32_t cpu_id = xPortGetCoreID();
         if (--s_count_of_nested_calls[cpu_id] == 0) {
             esp_ipc_isr_finish_cmd = 1;
+            // Make sure end flag is cleared and esp_ipc_isr_waiting_for_finish_cmd is done.
+            esp_ipc_isr_wait_for_end();
             IPC_ISR_EXIT_CRITICAL();
             portCLEAR_INTERRUPT_MASK_FROM_ISR(s_stored_interrupt_level);
         } else if (s_count_of_nested_calls[cpu_id] < 0) {
@@ -174,7 +176,7 @@ static void IRAM_ATTR esp_ipc_isr_call_and_wait(esp_ipc_isr_func_t func, void* a
     const uint32_t cpu_id = xPortGetCoreID();
 
     // waiting for the end of the previous call
-    while (!esp_ipc_isr_end_fl) {};
+    esp_ipc_isr_wait_for_end();
 
     esp_ipc_func = func;
     esp_ipc_func_arg = arg;
@@ -196,8 +198,13 @@ static void IRAM_ATTR esp_ipc_isr_call_and_wait(esp_ipc_isr_func_t func, void* a
         while (!esp_ipc_isr_start_fl) {};
     } else {
         // IPC_ISR_WAIT_FOR_END
-        while (!esp_ipc_isr_end_fl) {};
+        esp_ipc_isr_wait_for_end();
     }
 }
 
+static void IRAM_ATTR esp_ipc_isr_wait_for_end()
+{
+    while (!esp_ipc_isr_end_fl) {};
+}
+
 /* End private functions*/
diff --git a/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_handler.S b/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_handler.S
index 0fb4ae676a..20638a6895 100644
--- a/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_handler.S
+++ b/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_handler.S
@@ -96,6 +96,7 @@ esp_ipc_isr_handler:
 
     /* set the start flag */
     movi    a0, esp_ipc_isr_start_fl
+    memw
     s32i    a0, a0, 0
 
     /* Call the esp_ipc_function(void* arg) */
@@ -113,6 +114,7 @@ esp_ipc_isr_handler:
 
     /* set the end flag */
     movi    a0, esp_ipc_isr_end_fl
+    memw
     s32i    a0, a0, 0
 
     /* restore a0 */
diff --git a/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_routines.S b/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_routines.S
index 01ddf8b528..e947c3ed2f 100644
--- a/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_routines.S
+++ b/components/esp_ipc/src/esp_ipc_isr/esp_ipc_isr_routines.S
@@ -23,6 +23,7 @@
 esp_ipc_isr_waiting_for_finish_cmd:
     /* waiting for the finish command */
 .check_finish_cmd:
+    memw
     l32i    a3, a2, 0
     beqz    a3, .check_finish_cmd
     ret
